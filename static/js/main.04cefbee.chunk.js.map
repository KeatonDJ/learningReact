{"version":3,"sources":["serviceWorker.js","components/welcome.jsx","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Welcome","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","time","timeZone","alarmTime","upDate","bind","assertThisInitialized","upDateAlarmHour","upDateAlarmMin","handleNegIncrement","handlePosIncrement","react_default","a","createElement","className","onClick","date","Date","hrs","getUTCHours","min","getUTCMinutes","sec","getUTCSeconds","retDate","alert","hr","slice","setState","Component","setInterval","element","welcome","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.04cefbee.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nclass Welcome extends Component {\r\n\r\n  state = {\r\n    time : \"\",\r\n    timeZone : 6,\r\n    alarmTime : \"00:00:00\"\r\n  }\r\n\r\n  constructor() {\r\n  super();\r\n  this.upDate = this.upDate.bind(this);\r\n  this.upDateAlarmHour = this.upDateAlarmHour.bind(this);\r\n  this.upDateAlarmMin = this.upDateAlarmMin.bind(this);\r\n  this.handleNegIncrement = this.handleNegIncrement.bind(this);\r\n  this.handlePosIncrement = this.handlePosIncrement.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n    <div>\r\n        <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <h1 className=\"card-title\">Current Time</h1>\r\n              <h2 className = \"card-text\">{this.upDate()}</h2>\r\n              <button onClick = {this.handlePosIncrement} className=\"btn btn-primary\">+Hr</button>\r\n              <button onClick = {this.handleNegIncrement} className=\"btn btn-primary\">-Hr</button>\r\n\r\n            </div>\r\n          </div>\r\n\r\n          <h2>AlarmTime = {this.state.alarmTime}</h2>\r\n          <button onClick = {this.upDateAlarmHour} className=\"btn btn-primary\">Hr+</button>\r\n          <button onClick = {this.upDateAlarmMin} className=\"btn btn-primary\">Min+</button>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  upDate(){\r\n    var date = new Date();\r\n    var hrs = date.getUTCHours();\r\n\r\n\r\n\r\n    if(this.state.timeZone >= 0 && this.state.timeZone <= 12){\r\n      hrs -= this.state.timeZone;\r\n    }\r\n\r\n    hrs -= hrs > 12 ? 12 : 0;\r\n\r\n    if (hrs < 0){\r\n      hrs = hrs * -1;\r\n    }\r\n\r\n    hrs = hrs < 10 ? \"0\" + hrs : hrs;\r\n\r\n    var min = date.getUTCMinutes();\r\n\r\n    min = min < 10 ? \"0\" + min : min;\r\n\r\n    var sec = date.getUTCSeconds();\r\n\r\n    sec = sec < 10 ? \"0\" + sec : sec;\r\n\r\n    let retDate = hrs + \":\" + min + \":\" + sec;\r\n\r\n    if(this.state.alarmTime === retDate){\r\n      alert(\"Alarm!!!\");\r\n    }\r\n\r\n\r\n    return retDate;\r\n  }\r\n\r\nupDateAlarmHour(){\r\n  var hr = this.state.alarmTime.slice(0,2);\r\n  hr++;\r\n  if(hr > 12){\r\n    hr = 0;\r\n  }\r\n  hr = hr < 10 ? \"0\" + hr : hr;\r\n  //console.log(hr);\r\n  var min = this.state.alarmTime.slice(3,5);\r\n  //console.log(min);\r\n  var sec = this.state.alarmTime.slice(6, 8);\r\n  //console.log(sec);\r\n\r\n  let retDate = hr + \":\" + min + \":\" + sec;\r\n\r\n  this.setState({alarmTime : retDate});\r\n}\r\n\r\nupDateAlarmMin(){\r\n  var hr = this.state.alarmTime.slice(0,2);\r\n  //console.log(hr);\r\n  var min = this.state.alarmTime.slice(3,5);\r\n  min++;\r\n  if(min > 60){\r\n    min = 0;\r\n  }\r\n  min = min < 10 ? \"0\" + min : min;\r\n  //console.log(min);\r\n  var sec = this.state.alarmTime.slice(6, 8);\r\n  //console.log(sec);\r\n\r\n  let retDate = hr + \":\" + min + \":\" + sec;\r\n\r\n  this.setState({alarmTime : retDate});\r\n}\r\n\r\n  handlePosIncrement() {\r\n    this.setState({ timeZone: this.state.timeZone - 1 });\r\n  }\r\n\r\n  handleNegIncrement(){\r\n    this.setState({ timeZone: this.state.timeZone + 1 });\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nexport default Welcome\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Welcome from \"./components/welcome\";\r\n\r\nfunction tickTock(){\r\n  const element = <Welcome />;\r\n\r\n  ReactDOM.render(\r\n    element,\r\n    document.getElementById(\"clock\"));\r\n\r\n}\r\n\r\n\r\nsetInterval(tickTock, 1000);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}